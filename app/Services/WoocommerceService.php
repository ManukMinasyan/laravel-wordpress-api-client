<?php
/**
 * Created by PhpStorm.
 * User: Asus
 * Date: 04.02.2019
 * Time: 14:11
 */

namespace App\Services;

use Automattic\WooCommerce\Client as WooCommerceClient;
use Automattic\WooCommerce\HttpClient\HttpClientException;
use Illuminate\Http\Exceptions\HttpResponseException;

class WoocommerceService extends WooCommerceClient
{
    /**
     * WoocommerceService constructor.
     */
    public function __construct()
    {
        parent::__construct(
            config('wordpress.WP_WC_URL'),
            config('wordpress.WP_WC_CONSUMER_KEY'),
            config('wordpress.WP_WC_CONSUMER_SECRET'),
            $options = []
        );
    }

    /**
     * @param string $endpoint
     * @param array  $parameters
     *
     * @return array|\Automattic\WooCommerce\HttpClient\Response|mixed
     */
    public function get($endpoint, $parameters = [])
    {
        try {
            $data = parent::get($endpoint, $parameters);

            if (gettype($data) === "array") {
                $data = collect($data);
            }

            $response = [
                'success' => true,
                'data'    => $data
            ];

            return $response;

        } catch (HttpClientException $e) {
            $response = $e->getResponse();
            $errors = collect(json_decode((string)$response->getBody(), true)['data'])->except('status');

            throw new HttpResponseException(response()->Error($errors));
        }
    }


    /**
     * @param string $endpoint
     * @param array  $data
     *
     * @return array|\Automattic\WooCommerce\HttpClient\Response|mixed
     */
    public function post($endpoint, $data)
    {
        try {
            $data = parent::post($endpoint, $data);

            if (gettype($data) === "array") {
                $data = collect($data);
            }

            $response = [
                'success' => true,
                'data'    => $data
            ];

            return $response;
        } catch (HttpClientException $e) {
            $response = $e->getResponse();
            $errors = json_decode((string)$response->getBody(), true);

            throw new HttpResponseException(response()->Error($errors));
        }
    }


    /**
     * @param string $endpoint
     * @param array  $data
     *
     * @return array|\Automattic\WooCommerce\HttpClient\Response|mixed
     */
    public function put($endpoint, $data)
    {
        try {
            $response = parent::put($endpoint,
                $data); // TODO: Change the autogenerated stub

            return $response;
        } catch (HttpClientException $e) {
            $response = $e->getResponse();
            $errors = json_decode((string)$response->getBody(), true);

            throw new HttpResponseException(response()->Error($errors));
        }
    }


    /**
     * @param string $endpoint
     * @param array  $parameters
     *
     * @return array|\Automattic\WooCommerce\HttpClient\Response|mixed
     */
    public function delete($endpoint, $parameters = [])
    {
        try {
            $response = parent::delete($endpoint,
                $parameters); // TODO: Change the autogenerated stub

            return $response;
        } catch (HttpClientException $e) {
            $response = $e->getResponse();
            $errors = json_decode((string)$response->getBody(), true);

            throw new HttpResponseException(response()->Error($errors));
        }
    }


    /**
     * @param string $endpoint
     *
     * @return array|\Automattic\WooCommerce\HttpClient\Response|mixed
     */
    public function options($endpoint)
    {
        try {
            $response
                = parent::options($endpoint); // TODO: Change the autogenerated stub
            return $response;
        } catch (HttpClientException $e) {
            $response = $e->getResponse();
            $errors = json_decode((string)$response->getBody(), true);

            throw new HttpResponseException(response()->Error($errors));
        }
    }
}